trigger:
  branches:
    include:
      - main  # Trigger the pipeline only on changes to the 'main' branch

pool:
  vmImage: ubuntu-latest

steps:
  # Step 1: Install Node.js
  - task: NodeTool@0
    inputs:
      versionSpec: '16.x'
    displayName: 'Install Node.js'

  # Step 2: Cache Cypress binaries to avoid re-downloading them for every build
  - task: Cache@2
    inputs:
      key: 'cypress-cache-$(Agent.OSArchitecture)-$(Build.SourceVersion)'
      restoreKeys: 'cypress-cache-$(Agent.OSArchitecture)-'
      path: $(HOME)/.cache/Cypress
    displayName: 'Cache Cypress binaries'

  # Step 3: Install dependencies in the root directory
  - script: |
      npm install
    displayName: 'Install dependencies in root directory'

  # Step 4: Install Cypress binary and set execution permissions
  - script: |
      npx cypress install
      chmod +x ./node_modules/.bin/cypress
    displayName: 'Install Cypress binary and set permissions'

  # Step 5: Install frontend dependencies, build the frontend project, and install wait-on
  - script: |
      cd frontend
      npm install
      npm install wait-on
      chmod +x ./node_modules/.bin/wait-on
      npm run build
    displayName: 'Install frontend dependencies, install wait-on, and build project'

  # Step 6: Start the frontend server and wait for it to be ready
  - script: |
      cd frontend
      npm start &
      npx wait-on http://localhost:3000
    displayName: 'Start Frontend Server and wait for readiness'

  # Step 7: Run Cypress E2E tests in headless mode using Chrome browser
  - script: |
      npx cypress install
      npx cypress verify
      npx cypress run --headless --browser chrome
    displayName: 'Run Cypress E2E Tests'

  # Step 8: Compile TypeScript files using the tsconfig.json configuration
  - script: |
      tsc -p tsconfig.json
    displayName: 'Compile TypeScript'

  # Step 9: Copy frontend build files to the artifact staging directory
  - script: |
      mkdir -p $(Build.ArtifactStagingDirectory)/frontend
      cp -r frontend/build/* $(Build.ArtifactStagingDirectory)/frontend/
    displayName: 'Copy frontend build files to artifact staging directory'

  # Step 10: Publish the build artifacts for use in Release Pipeline
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)  # Path to artifact staging directory
      artifactName: 'frontend-drop'  # Name of the artifact
      publishLocation: 'Container'  # Store artifact in the container
    displayName: 'Publish Build Artifacts'
